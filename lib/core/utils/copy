
// class BottomNavigation extends StatefulWidget {
//   const BottomNavigation({Key? key}) : super(key: key);

//   @override
//   _BottomNavigationExampleState createState() => _BottomNavigationExampleState();
// }

// class _BottomNavigationExampleState extends State<BottomNavigation> {
//   int _selectedTab = 1;

//   final List<Widget> _pages = [
//     CategoriesView(),
//     Homepage(),
//     StoreView(),
//     ImagesUploadPage(),
//   ];

//   void _changeTab(int index) {
//     setState(() {
//       _selectedTab = index;
//     });
//   }

//   @override
//   Widget build(BuildContext context) {
//     Size size = MediaQuery.of(context).size;
//     return MultiBlocProvider(
//       providers: [
//         BlocProvider(
//           create: (context) =>
//               MostVisitedCubit(CategoriesRepoImpl(ApiService(Dio())))
//                 ..fetchmostvisited(),
//         ),
//         BlocProvider(
//           create: (context) =>
//               CategoriesCubitCubit(CategoriesRepoImpl(ApiService(Dio())))
//                 ..fetchCategories(),
//         ),
//         BlocProvider(
//           create: (context) => SearchCubit(SearchRepoImp(ApiService(Dio()))),
//         ),
//       ],
//       child: Scaffold(
//         appBar: (_selectedTab != 1 && _selectedTab != 2)
//             ? CustomAppBar()
//             : null, // Remove the AppBar if the second or third page is selected
//         drawer: CustomDrawer(),
//         body: _pages[_selectedTab],
//         bottomNavigationBar: Container(
//           margin: EdgeInsets.all(20),
//           height: size.width * .155,
//           decoration: BoxDecoration(
//             color: Colors.white,
//             boxShadow: [
//               BoxShadow(
//                 color: Colors.black.withOpacity(.15),
//                 blurRadius: 30,
//                 offset: Offset(0, 10),
//               ),
//             ],
//             borderRadius: BorderRadius.circular(50),
//           ),
//           child: ListView.builder(
//             itemCount: 4, // Adjust this to match the number of pages
//             scrollDirection: Axis.horizontal,
//             padding: EdgeInsets.symmetric(horizontal: size.width * .024),
//             itemBuilder: (context, index) => InkWell(
//               onTap: () {
//                 _changeTab(index);
//               },
//               splashColor: Colors.transparent,
//               highlightColor: Colors.transparent,
//               child: Column(
//                 mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                 children: [
//                   AnimatedContainer(
//                     duration: Duration(milliseconds: 1500),
//                     curve: Curves.fastLinearToSlowEaseIn,
//                     margin: EdgeInsets.only(
//                       bottom: index == _selectedTab ? 0 : size.width * .029,
//                       right: size.width * .0422,
//                       left: size.width * .0422,
//                     ),
//                     width: size.width * .128,
//                     height: index == _selectedTab ? size.width * .014 : 0,
//                     decoration: BoxDecoration(
//                       color: Colors.orange,
//                       borderRadius: BorderRadius.vertical(
//                         bottom: Radius.circular(10),
//                       ),
//                     ),
//                   ),
//                   Icon(
//                     listOfIcons[index],
//                     size: size.width * .076,
//                     color: index == _selectedTab
//                         ? Colors.orange
//                         : Colors.black38,
//                   ),
//                   SizedBox(height: size.width * .03),
//                 ],
//               ),
//             ),
//           ),
//         ),
//       ),
//     );
//   }

//   final List<IconData> listOfIcons = [
//     Icons.favorite_rounded,
//     Icons.home_rounded,
//     Icons.shopping_bag_outlined,
//     Icons.camera_alt_rounded,
//   ];
// }









import 'dart:developer';

import 'package:dio/dio.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:go_router/go_router.dart';
import 'package:sawah/constants.dart';
import 'package:sawah/core/utils/api_service.dart';
import 'package:sawah/core/widgets/custom_textfield.dart';
import 'package:sawah/features/home/pres/views/widget/app_filter.dart';
import 'package:sawah/features/search/data/repos/search_repo_imp.dart';
import 'package:sawah/features/search/presentation/manager/searh_cubit.dart';
import 'package:sawah/features/search/presentation/manager/searh_cubit_state.dart';
import 'package:sawah/features/search/presentation/views/widgets/gridsearchresult.dart';
import 'package:sawah/features/search/presentation/views/widgets/search_view_body.dart';

class CustomAppBar extends StatelessWidget implements PreferredSizeWidget {
  CustomAppBar({super.key});
  String? name;
  @override
  Size get preferredSize => const Size.fromHeight(45.0);

  @override
  Widget build(BuildContext context) {
    return AppBar(
      iconTheme: const IconThemeData(color: Colors.white),
      backgroundColor: abarcolor,
      elevation: 1,
      title: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Padding(
          //   padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 10),
          //   child: SizedBox(
          //     width: MediaQuery.of(context).size.width * .6,
          //     height: 36,
          //     child: Center(
          //       child: TextField(
          //         decoration: InputDecoration(
          //           filled: true,
          //           fillColor: Colors.white,
          //           prefixIcon: const Icon(
          //             FontAwesomeIcons.search,
          //             size: 20,
          //             color: Colors.orange,
          //           ),
          //           suffixIcon: IconButton(
          //             onPressed: () {
          //               showDialog(
          //                 context: context,
          //                 builder: (BuildContext context) {
          //                   return SingleChildScrollView(
          //                       child: CustomAlertDialog());
          //                 },
          //               );
          //             },
          //             icon: const Icon(
          //               Icons.menu,
          //               color: Colors.orange,
          //             ),
          //           ),
                    
          //           contentPadding: const EdgeInsets.symmetric(horizontal: 8),
          //           hintText: 'home.search'.tr(),
          //           border: OutlineInputBorder(
          //               borderRadius: BorderRadius.circular(10)),
          //           hintStyle: const TextStyle(
          //             fontSize: 15,
          //             color: Color.fromARGB(255, 107, 99, 99),
          //           ),
          //         ),
          //         onSubmitted: (value) async {
          //           log('search');
          //           await BlocProvider.of<SearchCubit>(context)
          //               .fetchSearchResult(name: value);

          //           Navigator.push(
          //               context,
          //               MaterialPageRoute(
          //                   builder: (context) => SearchViewBody(
          //                         name: value,
          //                       )));
          //         },
          //       ),
          //     ),
          //   ),
          // ),
          IconButton(
                      onPressed: () {
                       GoRouter.of(context)
                  .push('/ChatHomeScreen');
                      },
                      icon: const Icon(
                        Icons.chat,
                        color: Colors.white,
                      ),
                    ),
        
        ],
      ),
    );
  }
}class Getreviewmodel {
  final String status;
  final String requestedAt;
  final int results;
  final List<ReviewData> data;

  Getreviewmodel({
    required this.status,
    required this.requestedAt,
    required this.results,
    required this.data,
  });

  factory Getreviewmodel.fromJson(Map<String, dynamic> jsonData) {
    var list = jsonData['data']['docs'] as List;
    List<ReviewData> reviewList = list.map((i) => ReviewData.fromJson(i)).toList();

    return Getreviewmodel(
      status: jsonData['status'],
      requestedAt: jsonData['requestedAt'],
      results: jsonData['results'],
      data: reviewList,
    );
  }
}

class ReviewData {
  final String id;
  final User user;
  final String reviewType;
  final String subject;
  final double rating;
  final String comment;
  final String createdAt;

  ReviewData({
    required this.id,
    required this.user,
    required this.reviewType,
    required this.subject,
    required this.rating,
    required this.comment,
    required this.createdAt,
  });

  factory ReviewData.fromJson(Map<String, dynamic> jsonData) {
    return ReviewData(
      id: jsonData['_id'],
      user: User.fromJson(jsonData['user']),
      reviewType: jsonData['reviewType'],
      subject: jsonData['subject'],
      rating: (jsonData['rating'] as num).toDouble(),
      comment: jsonData['comment'],
      createdAt: jsonData['createdAt'],
    );
  }
}

class User {
  final String id;
  final String name;
  final String photo;
  final String kind;

  User({
    required this.id,
    required this.name,
    required this.photo,
    required this.kind,
  });

  factory User.fromJson(Map<String, dynamic> jsonData) {
    return User(
      id: jsonData['_id'],
      name: jsonData['name'],
      photo: jsonData['photo'],
      kind: jsonData['kind'],
    );
  }
}